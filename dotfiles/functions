# -*- mode: sh -*-


function condaup
{
    export _miniconda=$HOME/anaconda3
    export _PYTHONBACK=$PYTHONPATH
    export _OLD_PS1=$PS1
    export _OLD_PATH=$PATH
    # export PATH=$_miniconda/bin:$PATH
    # export PS1="[conda]$PS1"
    POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(anaconda custom_conda context time dir)
    POWERLEVEL9K_CUSTOM_CONDA="echo '[conda]'"
    POWERLEVEL9K_CUSTOM_CONDA_FOREGROUND='073'
    POWERLEVEL9K_CUSTOM_CONDA_BACKGROUND='238'
    unset PYTHONPATH
    __conda_setup="$('$_miniconda/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
    eval "$__conda_setup"
    if [ -f "/home/dag/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/dag/anaconda3/etc/profile.d/conda.sh"
    fi
    export PATH=$_miniconda/bin:$PATH
    unset __conda_setup
}

function condaback
{
    export PYTHONPATH=$_PYTHONBACK
    export PATH=$_OLD_PATH
    export PS1=$_OLD_PS1
    POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(virtualenv context time dir)
    unset _PYTHONBACK
    unset _OLD_PS1
    unset _OLD_PATH
    unset conda
}

function pyenvup
{
    export _PYTHONBACK=$PYTHONPATH
    export _OLD_PATH=$PATH
    export _OLD_PS1=$PS1
    export PYENV_VIRTUALENV_DISABLE_PROMPT=1
    POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(custom_pyenv virtualenv context time dir)
    POWERLEVEL9K_CUSTOM_PYENV="echo '[pyenv]'"
    POWERLEVEL9K_CUSTOM_PYENV_FOREGROUND='073'
    POWERLEVEL9K_CUSTOM_PYENV_BACKGROUND='238'
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
}

function pyenvback
{
    export PYTHONPATH=$_PYTHONBACK
    export PATH=$_OLD_PATH
    export PS1=$_OLD_PS1
    POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(virtualenv context time dir)
    unset _PYTHONBACK
    unset _OLD_PATH
    unset _OLD_PS1
    unset PYENV_VIRTUALENV_DISABLE_PROMPT
}

function f
{
    # Find a pattern for a specific extension file (uncase-sensitive pattern).
    # usage: f pattern ext or f pattern
    if [ "$#" -eq 1 ]; then
        fd -i $1
    elif [ "$#" -eq 2 ]; then
        fd -e $2 -i $1
    else
        echo "You need 1 or 2 param pattern [ext]";
    fi
}

function pyv
{
    # Try to find the current version of a specific package.
    if [ "$#" -eq 1 ]; then
        _pypkg=$1
        echo $_pypkg `python -c "import $_pypkg;print($_pypkg.__version__)"`
    else
        echo "Need one Python package name.";
    fi
}

function ext
{
    if [ "$#" -ne 1 ]; then
        echo "need a extension"
    fi
    ext=$1
    # use fd-find instead of find
    fd -e $ext
}

function c
{
    # Launch a compilation with 'make'. It's possible to pass the number of
    # cores for parallel compilation.
    if [ "$#" -eq 1 ]; then
        chrt -i 0 make -j $1
    elif [ "$#" -eq 2 ]; then
        chrt -i 0 make -j $1 $2 # to pass the target
    else
        chrt -i 0 make
    fi
}

function t
{
    # launch emacs without config on a term
    emacs -Q -nw --eval "(progn (load-theme 'leuven) (tool-bar-mode -1) (menu-bar-mode -1))" $*
}


function ne
{
    # launch emacs a naked Emacs (in a Windows)
    emacs -Q --eval "(progn (load-theme 'misterioso) (tool-bar-mode -1) (menu-bar-mode -1) (set-default-font \"DejaVu Sans Mono-12\"))" $*
}


# random lines from a file (suppose there is a header and always pick the first) 10%
# of the content of the file by default
function rl
{
    if [ "$#" -eq 1 ]; then
        _line_num=`sed -n '$=' $1`
        _line_num=`echo $(($_line_num / 10))`
        cat <(head -n 1 $1) <(shuf -n $_line_num $1)
    elif [ "$#" -eq 2 ]; then
        # suppose you pass the number of lines to sample
        cat <(head -n 1 $1) <(shuf -n $2 $1)
    else
        echo "At least one mandatory param (filename).";
    fi
}

# (current) week summary from timewarrior
function tweek
{
    monday=`date -dlast-monday +%Y-%m-%d`
    saturday=`date -dsaturday +%Y-%m-%d`
    timew summary :ids $monday - $saturday
}

# function which wraps the pew new command in order to post-install some packages
function pn
{
    if [ "$#" -eq 1 ]; then
        pew new $1 -i python-language-server -i "jedi<0.18" -i ipython -i isort -i flake8 -i pylint -i black
    else
        echo "Required argument (name of the venv)"
    fi
}
